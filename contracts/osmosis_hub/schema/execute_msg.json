{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Cw20 hook message handler",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Bond specified amount of osmo",
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw osmo that have finished unbonding in previous batches",
      "type": "object",
      "required": [
        "withdraw_unbonded"
      ],
      "properties": {
        "withdraw_unbonded": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a validator to the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a validator from the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfer ownership to another account; will not take effect unless the new owner accepts",
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept an ownership transfer",
      "type": "object",
      "required": [
        "accept_ownership"
      ],
      "properties": {
        "accept_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim staking rewards, swap all for osmo, and restake",
      "type": "object",
      "required": [
        "harvest"
      ],
      "properties": {
        "harvest": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use redelegations to balance the amounts of osmo delegated to validators",
      "type": "object",
      "required": [
        "rebalance"
      ],
      "properties": {
        "rebalance": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update osmo amounts in unbonding batches to reflect any slashing or rounding errors",
      "type": "object",
      "required": [
        "reconcile"
      ],
      "properties": {
        "reconcile": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit the current pending batch of unbonding requests to be unbonded",
      "type": "object",
      "required": [
        "submit_batch"
      ],
      "properties": {
        "submit_batch": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit an unbonding request to the current unbonding queue; automatically invokes `unbond` if `epoch_time` has elapsed since when the last unbonding queue was executed. This should only be used when the liquid staking token is a native token and the tokens to be unbonded are must be sent with the message.",
      "type": "object",
      "required": [
        "queue_unbond"
      ],
      "properties": {
        "queue_unbond": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callbacks; can only be invoked by the contract itself",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CallbackMsg": {
      "oneOf": [
        {
          "description": "Following the swaps, stake the osmo acquired to the whitelisted validators",
          "type": "object",
          "required": [
            "reinvest"
          ],
          "properties": {
            "reinvest": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
